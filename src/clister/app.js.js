const cluster = require('cluster');
const http = require('http');
const os = require('os');
const url = require('url');
const loadEnv = require('./utils/loadEnv.js');
const logger = require('./utils/logger.js');
const routes = require('./routes');

// –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ .env
loadEnv();

const PORT = process.env.PORT || 3000;
const APP_NAME = process.env.APP_NAME || 'MyNodeApp';

if (cluster.isMaster) {
  console.log(`‚öôÔ∏è –ú–∞–π—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å ${process.pid} –∑–∞–ø—É—â–µ–Ω–æ`);
  const numCPUs = os.cpus().length;

  // –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤–æ—Ä–∫–µ—Ä–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —è–¥—Ä–∞ –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –≤–∏—Ö–æ–¥—É –≤–æ—Ä–∫–µ—Ä–∞
  cluster.on('exit', (worker, code, signal) => {
    console.log(`üíÄ –í–æ—Ä–∫–µ—Ä ${worker.process.pid} –∑–∞–≥–∏–Ω—É–≤ (–∫–æ–¥: ${code}, —Å–∏–≥–Ω–∞–ª: ${signal}). –ó–∞–ø—É—Å–∫–∞—é –Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞...`);
    cluster.fork(); // –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤–∏–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
  });
} else {
  // –ö–æ–¥, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤–æ—Ä–∫–µ—Ä–∞–º–∏
  const server = http.createServer(async (req, res) => {
    const parsedUrl = url.parse(req.url, true);
    req.pathname = parsedUrl.pathname;
    req.query = parsedUrl.query;

    logger(req);

    for (const route of routes) {
      const match = route.match(req.method, req.pathname);
      if (match) {
        req.params = match.params;
        return route.handler(req, res);
      }
    }

    res.writeHead(404, { 'Content-Type': 'text/plain; charset=utf-8' });
    res.end('404 Not Found (–í–æ—Ä–∫–µ—Ä: ' + process.pid + ')');
  });

  server.listen(PORT, () => {
    console.log(`üë∑ –í–æ—Ä–∫–µ—Ä ${process.pid} —Å–ª—É—Ö–∞—î –ø–æ—Ä—Ç ${PORT}`);
  });
}